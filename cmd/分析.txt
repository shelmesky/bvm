编译器中，TVars类型的变量，生成指令INITVARS和SETVAR.

INITVARS是初始化变量，SETVAR是设置变量的值。

func myfunc1(str aaa, str bbb) str {
        arr.int myintarr
        myintarr += 112
        return aaa + bbb
}

myfunc1("xxxx", "yyyy")


compile node type: TVars
compile node type: TBinary
compile node type: TSetVar


vm execute: PUSHSTR    start:16    end: 20	// 向栈顶保存了字符串在rt.Strings总的index:9
vm execute: PUSHSTR    start:20    end: 24	// 向栈顶保存了字符串在rt.Strings总的index:10
vm execute: CALLFUNC    IP:20
vm execute: GETPARAMS    idx: 2	// 从栈顶开始循环将函数参数放在Vars变量中
vm execute: INITVARS    count: 1    type: VArr    // 向栈顶保存了数组在rt.Objects总的index:2
vm execute: SETVAR    Vars_index: 2, Vars array length:[4]	// 在栈定保存SETVAR的参数2, 即
vm execute: PUSH16    112
vm execute: APPENDARR    index: 10    Objects length:2

Vars用来保存所有类型的变量，如字符串、list、map、int等类型在rt.Strings/rt.Objects中的索引位置。

SETVAR指令中的作用是将某变量的索引值放在栈顶：

a := code[i]
b := Vars[a]

code[i]指定了SETVAR的变量在Vars数组中的索引，Vars[a]指定了从Vars数组中找到真正在rt.Strings或rt.Objects中的索引位置。

生成的指令列表中，SETVAR代码的过程a和b索引到了错误的Vars位置。

在INITVARS指令处，初始化了数组类型，所以rt.Objects的长度为2.
APPENDARR指令打印Objects长度为2，但索引的却是10.


编译时，观察TBinary和TSetVar指令，生成的index也是2。即在cmpl.Contract.Vars数组中的位置。

在编译时只使用cmpl.Contract.Vars数组，但是运行时使用了Vars和rt.String/rt.Ojbects数组，映射出现错误？

---------------------------------------------------------------------------------------------------------------------

contract testDefS {

    // 全局变量声明放在代码最开始

    func myfunc1() {
        arr.int myintarr
        myintarr += 112
    }

     func myfunction(str a) str {
                arr.str myarr1
                myarr1 += `abcdefg`
                return a + `...`
     }

    myfunction("gogogo")
    myfunc1()


    return
}

---------------------------------------------------------------------------------------------------------------------

vm execute: DATA    length: 8

vm execute: JMP    label: 1
rt.Strings: ["", "0122afcd34"]
Vars: []


vm execute: INITVARS    count: 1    type: VStr
rt.Strings: ["", "0122afcd34", ""]
Vars: [2]   // 初始化myfunction函数的参数str a， 将其在rt.Strings中的索引保存在Vars中


vm execute: JMP    label: 10
rt.Strings: ["", "0122afcd34", ""]
Vars: [2]


vm execute: PUSHSTR    start:10    end: 16
rt.Strings: ["", "0122afcd34", "", "gogogo"]
Vars: [2]


vm execute: CALLFUNC    IP:28
rt.Strings: ["", "0122afcd34", "", "gogogo"]
Vars: [2]


vm execute: GETPARAMS    idx: 1
rt.Strings: ["", "0122afcd34", "", "gogogo"]
Vars: [3]   // 将gogogo这个字符串索引覆盖了之前str a参数的索引


vm execute: INITVARS    count: 1    type: VArr
rt.Strings: ["", "0122afcd34", "", "gogogo"]
Vars :[3, 0]    // 初始化arr.str myarr1字符串数组， 将其在rt.Objects中的索引保存在Vars中


vm execute: SETVAR    Vars_index: 1, Vars array length:[2]
rt.Strings: ["", "0122afcd34", "", "gogogo"]
Vars :[3, 0]
// SETVAR的参数是1, Vars[1]的值是0, 将0这个位置的地址指针保存在stack[top]
// Vars[1]这个位置的索引值是arr.str myarr1

vm execute: PUSHSTR    start:0    end: 7
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg"]
Vars :[3, 0]
// 将abcdefg字符串放在rt.Strings数组中
// 并在栈顶保存其在rt.Strings中的索引位置

vm execute: APPENDARR    index: 0    Objects length:1
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg"]
Vars :[3, 0]
// 将之前SETVAR命令中指定的arr.str myarr1变量的地址从stack[top-1]中取出
// 为什么是top-1， 因为APPENDARR指令不带参数， 它的参数需要从栈中取出
// 而top-1保存的值就是SETVAR指令保存的myarr1变量的在rt.Objecst的索引值， 这个索引值保存在Vars中的索引的地址。
// 拿到这个地址， 经过指针解引用， 相当与方位了Vars[1]这个位置的值。
// 而Vars[1]的值是0, 即APPENDARR在rt.Objects[0]的这个元素append数据。
// rt.Objects[0]就是myarr1数组.


vm execute: GETVAR    Vars_index: 0
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg"]
Vars :[3, 0]
// 在栈定保存gogogo字符串在在Vars中的索引位置3
// stack[top] = Vars[code[i]]


vm execute: PUSHSTR    start:7    end: 10
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg", "..."]
Vars :[3, 0]
// rt.Strings增加字符串...， 并在栈顶保存其在rt.Strings中的索引


vm execute: ADDSTR
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg", "...", "gogogo..."]
Vars :[3, 0]
// 在rt.Strings中保存栈顶的两个字符串相加， 即gogogo + ...
// 然后在栈定保存相加后的字符串在rt.Strings的索引


vm execute: RETFUNC
// 从函数myfunction中返回， 并设置Vars数组
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg", "...", "gogogo..."]
Vars :[3]


vm execute: CALLFUNC    IP:12
// 调用函数myfunc1


vm execute: INITVARS    count: 1    type: VArr
// 初始化变量 arr.int myintarr
rt.Strings: ["", "0122afcd34", "", "gogogo", "abcdefg", "...", "gogogo..."]
rt.Objects: [[4], []]
Vars :[3, 1] // 新增的1是myintarr变量在rt.Objecst中的索引


vm execute: SETVAR    Vars_index: 0, Vars array length:[2]
// 到这里开始出问题:
// a := code[i]
// b := Vars[a]
// c := &b
// code[i]的结果即SETVAR的参数是0, 而Vars[0]保存的是3,
// 这个是gogogo字符串在rt.Strings中的索引
// 最后将这个Vars[a]的值保存在栈顶


vm execute: PUSH16    112
// 将数字112放在栈顶


vm execute: APPENDARR    index: 3    Objects length:2
// 使用SETVAR设置的值3, 在rt.Objects中索引数组myintarr
// myintarr保存在rt.Objecst[1]的位置， 并不是3

panic: runtime error: index out of range

---------------------------------------------------------------------------------------------------------------------

contract testDefS {

    func myfunc1(str a, str b, str c, str d, str e) str {
        return "111"
    }

    myfunc1("000", "111", "222", "333", "444")

    return
}


vm execute: DATA    length: 9
vm execute: JMP    label: 3


// 将多个参数放在rt.Strings数组中，将其索引放在栈顶
vm execute: PUSHSTR    start:3    end: 6
vm execute: PUSHSTR    start:6    end: 9
vm execute: PUSHSTR    start:9    end: 12
vm execute: PUSHSTR    start:12    end: 15
vm execute: PUSHSTR    start:15    end: 18


// 调用函数:
// calls[coff] = i + 2              // 在coff处将当前指令后的2条指令指针保存
// calls[coff+1] = int64(len(Vars)) //在coff+1处保存Vars数组的长度
// coff += 2                        // coff变量+2
// i += int64(int16(code[i+1]))     // 为函数调用修改变量指针地址
vm execute: CALLFUNC    IP:13


// 初始化函数参数: 初始化变量放在rt.Strings中，将起索引放在Vars数组中.
// 栈上保存的是调用函数前PUSH指令放到栈上的参数索引
vm execute: INITVARS    count: 5    type: VStr    type: VStr    type: VStr    type: VStr    type: VStr


// 获取函数参数: 将PUSHSTR放在栈顶的参数(索引)复制给Vars数组中
vm execute: GETPARAMS    idx: 5


vm execute: PUSHSTR    start:0    end: 3


// 将返回值压入栈顶
vm execute: RETFUNC


// 返回到调用函数：
// Vars = Vars[:b]	// 恢复Vars数组
// i = calls[coff]	// 恢复指令指针
vm execute: RETURN

这里有3个连续的指令，完成了传参的功能，分别是:

PUSHSTR: 将字符串放在Strings数组，将索引放在栈顶
INITVARS: 初始化参数字符串为空字符串并存放在Strings数组，然后将索引放在Vars数组
GETPARAMS: 根据参数的个数，循环将Vars[index]值替换为stack[top]的值，
即用PUSHSTR存放在Strings数组中的调用参数索引替换INITVARS生成的实际参数索引。


INITVARS增加Vars数组，GETPARAMS设置Vars数组，RETFUNC减少RET数组。

在函数调用开始的指令CALLFUNC会保存Vars数组的长度，函数执行期间由于INITVARS指令Vars数组会增长，但RETFUNC指令又会恢复Vars数组的长度。

导致下面的函数问题：

contract testDefS {

    func myfunc1(str b) str {
        arr.str as
        as += `aaa`
        return ""
    }

    myfunc1("aaa")

    arr.int ai
    // 全局变量声明放在代码最开始
    ai += 100

    return
}

myfunc1函数调用前后，Vars数组的长度没有发生变化，即ai变量的索引值还是错误的。
这和下面的代码效果一样：

contract testDefS {

    func myfunc1(str b) str {
        arr.str as
        as += `aaa`
        return ""
    }

    arr.int ai
    // 全局变量声明放在代码最开始
    ai += 100

    return
}

ai变量在Vars数组中保存的索引为1, 即Vars数组长度需要为2.
但由于myfunc1在编译时在Contract.Vars数组中有占位，但VM执行时没有执行myfunc1的INITVARS指令，导致Vars数组长度为1.

及时没有全局变量，只有函数和调用，也有存在问题：

contract testDefS {

    func myfunc1(str a) str {
        arr.str as
        as += `aaa`
        return ""
    }


    func myfunc2(str b) str {
        arr.str bs
        bs += `aaa`
        return ""
    }

    myfunc1("aaa")
    myfunc2("bbb")

    return
}


Contract.Vars数组变化如下：
编译str a时， index为0
编译arr.str as时，index为1
编译完成myfunc1函数，从Vars数组删除as变量，只剩str a
编译str b时，index为1
编译arr.str bs时，索引为2

问题的本质出在，运行时：

CALLFUNC指令保存函数返回时的位置，并保存当前Vars数组的长度。
INITVARS创建str a
INITVARS创建arr.str as
RETRUNC返回恢复指令位置，同时恢复Vars数组长度。

进入之前Vars为0, 退出函数调用之后Vars长度依然为0.

但这样就和编译时冲突，编译时当函数体编译完毕，只会删除局部变量。


解决方案：
1. 编译时不删除任何变量，这样变量的index就变成自增
2. 运行时到RETFUNC指令时不恢复Vars数组

但这样就带来一个新问题，由于在编译时只书用了一个数组Contract.Vars，字节码中的索引都是指这个数组中索引。
但运行时分为两个数组，Strings存储字符串，Objects存储array和map，
导致运行时如果这两个数组都有元素，那么编译的索引在运行时就对不上号了。

例如下面的代码：

contract testDefS {

    func myfunc1(str a) str {   // a: 0
        arr.str as              // as: 1
        as += `aaa`
        return ""
    }



    func myfunc2(str b) str {   // b: 2
        arr.str bs              // bs: 3
        bs += `aaa`
        return ""
    }

    str xxxx

    myfunc1("aaa")
    myfunc2("bbb")

    arr.str bbb
    bbb += `bbb`
    println(bbb[0])

    func get() map.str {
        map.str mapb
        mapb[`0`] = `q`
        mapb[`1`] = `w`
        return mapb
    }

    myfunc2("aaa")

    return
}

运行时报错：

vm execute: DATA    length: 11
vm execute: INITVARS    count: 1    type: VStr
vm execute: JMP    label: 1
vm execute: INITVARS    count: 1    type: VStr
vm execute: JMP    label: 1
vm execute: INITVARS    count: 1    type: VStr
vm execute: PUSHSTR    start:6    end: 9
vm execute: CALLFUNC    IP:18
vm execute: GETPARAMS    idx: 1
vm execute: INITVARS    count: 1    type: VArr
vm execute: SETVAR    code[i]:1,  Vars[code[i]]:3  Vars_length:[4]
vm execute: PUSHSTR    start:0    end: 3
vm execute: APPENDARR    index: 3    Objects length:1
panic: runtime error: index out of range

APPENDARR指令使用索引3, 在Objects数组中查找array元素，但此时Objects数组内只有1个元素。
为什么会是索引3, 因为加上了前面3个元素。


注意: 这个问题和在编译函数时，在JMP指令前编译参数，还是在JMP指令后编译参数无关。
因为修改编译时不删除变量和RETFUNC不恢复Vars数组之后，数量上永远是增加，不会减少。



但是在JMP指令前编译参数和在JMP指令后编译参数，影响了在在函数调用时，是否先使用INITVARS初始化函数的问题。
在JMP指令后编译参数，会带来函数直到被调用后，才能运行INITVARS初始化参数和函数体内的局部变量。
在JMP指令前编译参数，虽然会将参数编译，但函数体内的局部变量没初始化，但是在编译时都已经全部初始化并有索引值。
所以在这是一个新问题。


例如下面的代码：

contract testDefS {

    func myfunc1(str a) str {   // a: 0
        arr.str as              // as: 1
        as += `aaa`
        return ""
    }



    func myfunc2(str b) str {   // b: 2
        arr.str bs              // bs: 3
        bs += `aaa`
        return ""
    }

    myfunc1("aaa")
    myfunc2("bbb")

    arr.str bbb
    bbb += `bbb`
    println(bbb[0])

    return
}

这样的代码没问题，执行不报错。

但是稍微修改一下：

contract testDefS {

    func myfunc1(str a) str {   // a: 0
        arr.str as              // as: 1
        as += `aaa`
        return ""
    }

    func myfunc2(str b) str {   // b: 2
        arr.str bs              // bs: 3
        bs += `aaa`
        return ""
    }

    str aaa = myfunc1("aaa")
    myfunc2("bbb")

    arr.str bbb
    bbb += `bbb`
    println(bbb[0])

    return
}

将myfunc1("aaa")变为str aaa = myfunc("aaa")就报告如下错误：

vm execute: DATA    length: 8
vm execute: JMP    label: 20
vm execute: JMP    label: 1
vm execute: INITVARS    count: 1    type: VStr
vm execute: SETVAR    code[i]:4  Vars_Length:[1]  index failed!!!
2019/06/26 18:41:37 vm.Run failed:SETVAR index failed!

SETVAR报错，期望使用索引4, 但我们发现目前只使用INITVARS指令建立了1个元素。

---------------------------------------------------------------------------------------------------------------------

1. 编译时在JMP前编译参数，还是在JMP后编译参数的问题，影响的是否需要函数调用，才能调用INITVARS增加Vars数组的问题。

2. 编译时全部删除，会带来旧的变量定义被全部清除，即经过一次Block编译就会清除所有变量问题。
编译时只删除局部变量，会出现指令的索引和Vars数组中的索引不匹配。

3. 当然这两种情况都有运行时Strings和Objects数组分开使用的问题。

4. VM代码在修改前，一个函数调用，运行CALLFUNC和RETFUNC指令后，函数的参数和局部变量都被清除。
VM代码在修改后，一个函数调用，运行CALLFUNC和RETFUNC指令后，函数的参数和局部变量都被保留下来。



解决方案：

1. 决定了最终代码中，是调用CALLFUNC前出现INITVARS指令，还是CALLFUNC之后出现INITVARS指令。这里初始化的是函数的参数。
影响了变量的数量，即是否发生函数调用，影响了接下来的变量的索引。
也就是说在执行到某个全局指令时，由于未调用该指令之前出现的函数，导致总数量上缺少了函数参数的数量。

2. 导致在整个编译过程中，减少了变量的总数量。

3. 需要使用两个数组。

4. 第2个问题减少了编译过程中变量的数量，而RETFUNC则是清除了一次函数执行过程中Vars数组的数量。

编译：
在JMP后编译参数
删除局部变量，保存参数和全局变量

运行：
运行时CALLFUNC指令加上函数参数的长度，因为编译阶段也有。
运行时将两个数组和为一个。


---------------------------------------------------------------------------------------------------------------------

函数：

    生成JMP指令
    函数参数生成INITVARS
    函数体生成INITVARS和其他指令
    生成RETFUNC


编译全局变量生成 INITVARS



首先解决不调用函数就不执行INITVARS指令的问题。


目前编译时，将Contract.Vars这个MAP当作符号表，但是在指令中或者其他结构中，并没有保存这个表。
只能靠指令中的INITVARS指令建立符号表。

---------------------------------------------------------------------------------------------------------------------

提前初始化所有变量，这样的代码是可运行的：

contract testDefS {

 arr.str bbb
    bbb += `bbb`
    println(bbb[0])

    println("xxxxxxxxx")

    func myfunc1(str a) str {   // a: 0
        println(a)
        arr.str as              // as: 1
        as += `aaa`
        return ""
    }



    func myfunc2(str b) str {   // b: 2
        arr.str bs              // bs: 3
        bs += `aaa`
        return ""
    }

    myfunc1("xxx")

    return
}


但下面的代码无法运行：

contract testDefS {

    func myfunc1(str a) str {   // a: 0
        arr.str as              // as: 1
        as += `aaa`
        return ""
    }



    func myfunc2(str b) str {   // b: 2
        arr.str bs              // bs: 3
        bs += `aaa`
        return ""
    }

    myfunc1("xxx")

    arr.str bbb
    bbb += `bbb`
    println(bbb[0])

    return
}

报错：
vm execute: DATA    length: 6
vm execute: JMP    label: 14
vm execute: JMP    label: 6
vm execute: PUSHSTR    start:6    end: 9
vm execute: CALLFUNC    IP:10
vm execute: GETPARAMS    idx: 1
vm execute: SETVAR    code[i]:1,  Vars[code[i]]:1  Vars_length:[5]
vm execute: PUSHSTR    start:0    end: 3
vm execute: APPENDARR    index: 1    Objects length:5
vm execute: PUSHSTR    start:3    end: 3
vm execute: RETFUNC
vm execute: SETVAR    code[i]:4,  Vars[code[i]]:7  Vars_length:[5]
vm execute: PUSHSTR    start:9    end: 12
vm execute: APPENDARR    index: 7    Objects length:5
panic: runtime error: index out of range

为什么APPENDARR    index: 7这个指令的参数是7, 是因为它前面的GETPARAMS指令，行为是把栈顶的参数放在Vars的顶端。
为什么GETPARAMS可以放在顶端，因为修改前GETPARAMS前面应该有个INITVARS指令，这个指令把新建的变量索引放在Vars顶端。
所以从这个角度说没问题。

即INITVARS指令的执行，要和其上下文指令相关。不能单独出现。

GETPARAMS的参数是数量，参数不是Vars数组中的索引。所以它只能让INITVARS指令把刚初始化好的参数，放在Vars顶端。

目前GETPARAMS的参数应该是GETPARAMS count index1 index2 ...


对于运行时Vars数组的使用，设计到以下几个指令：
SETVAR
GETVAR
GETPARAMS
LOADPARS
CALLFUNC
RETFUNC

SETVAR GETVAR会根据编译时变量出现的索引操作变量。

而剩下的指令则根据目前Vars的长度操作。


再重申一遍最初代码的问题，
不执行INITVARS不建立符号表
编译时变量的索引都是增长的，但执行是RETFUNC每执行一个函数调用就会恢复Vars数组。

